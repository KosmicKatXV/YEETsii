
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\007\005\000\002\002\004\000\002\007" +
    "\004\000\002\006\006\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\003\000\002\006\005\000\002" +
    "\006\005\000\002\011\002\000\002\004\006\000\002\004" +
    "\003\000\002\012\002\000\002\005\010\000\002\005\005" +
    "\000\002\013\002\000\002\003\006\000\002\003\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\022\004\006\005\004\006\010\007\015\010" +
    "\005\012\011\014\016\016\012\001\002\000\004\014\uffe9" +
    "\001\002\000\020\015\ufff7\021\ufff7\022\063\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\001\002\000\004\014\uffeb\001\002" +
    "\000\004\014\060\001\002\000\004\014\uffea\001\002\000" +
    "\004\012\046\001\002\000\004\011\034\001\002\000\004" +
    "\002\033\001\002\000\014\021\031\023\020\024\021\025" +
    "\023\026\022\001\002\000\004\014\uffe8\001\002\000\022" +
    "\004\006\005\004\006\010\007\015\010\005\012\011\014" +
    "\016\016\012\001\002\000\014\015\024\023\020\024\021" +
    "\025\023\026\022\001\002\000\022\004\006\005\004\006" +
    "\010\007\015\010\005\012\011\014\016\016\012\001\002" +
    "\000\022\004\006\005\004\006\010\007\015\010\005\012" +
    "\011\014\016\016\012\001\002\000\022\004\006\005\004" +
    "\006\010\007\015\010\005\012\011\014\016\016\012\001" +
    "\002\000\022\004\006\005\004\006\010\007\015\010\005" +
    "\012\011\014\016\016\012\001\002\000\016\015\ufff5\021" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\001\002\000\016" +
    "\015\ufffb\021\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\001" +
    "\002\000\016\015\ufffa\021\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\001\002\000\016\015\ufffc\021\ufffc\023\ufffc\024" +
    "\ufffc\025\023\026\022\001\002\000\016\015\ufffd\021\ufffd" +
    "\023\ufffd\024\ufffd\025\023\026\022\001\002\000\024\002" +
    "\uffff\004\006\005\004\006\010\007\015\010\005\012\011" +
    "\014\016\016\012\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\012\013\uffec\017\uffec\020\uffec" +
    "\021\uffec\001\002\000\010\017\ufff2\020\uffee\021\ufff2\001" +
    "\002\000\006\017\037\021\ufff4\001\002\000\016\015\ufff8" +
    "\021\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\001\002\000" +
    "\004\021\041\001\002\000\004\011\034\001\002\000\010" +
    "\017\ufff3\020\uffee\021\ufff3\001\002\000\004\020\044\001" +
    "\002\000\004\011\045\001\002\000\012\013\uffed\017\uffed" +
    "\020\uffed\021\uffed\001\002\000\004\011\034\001\002\000" +
    "\006\013\051\020\ufff1\001\002\000\004\020\052\001\002" +
    "\000\016\015\ufff9\021\ufff9\023\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\001\002\000\004\012\053\001\002\000\004\011\034" +
    "\001\002\000\006\013\055\020\uffee\001\002\000\006\013" +
    "\ufff0\020\ufff0\001\002\000\006\013\057\020\uffee\001\002" +
    "\000\006\013\uffef\020\uffef\001\002\000\022\004\006\005" +
    "\004\006\010\007\015\010\005\012\011\014\016\016\012" +
    "\001\002\000\014\015\062\023\020\024\021\025\023\026" +
    "\022\001\002\000\016\015\ufffe\021\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\001\002\000\022\004\006\005\004\006" +
    "\010\007\015\010\005\012\011\014\016\016\012\001\002" +
    "\000\016\015\ufff6\021\ufff6\023\020\024\021\025\023\026" +
    "\022\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\010\002\006\006\013\007\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\046\001\001\000" +
    "\006\003\034\004\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\006\006\016\001" +
    "\001\000\002\001\001\000\006\002\006\006\027\001\001" +
    "\000\006\002\006\006\026\001\001\000\006\002\006\006" +
    "\025\001\001\000\006\002\006\006\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\006\006\013\007\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\042\001\001\000\004\011\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\041\001" +
    "\001\000\004\013\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\055\001\001\000" +
    "\004\012\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\053\001\001\000\004\013" +
    "\042\001\001\000\002\001\001\000\004\013\042\001\001" +
    "\000\002\001\001\000\006\002\006\006\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\006\006\063" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 Map<String,double[][]> varmap = new HashMap<String,double[][]>(); 
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cod ::= matriz PYC cod 
            {
              Map<String,double[][]> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cod",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cod EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Map<String,double[][]> start_val = (Map<String,double[][]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cod ::= matriz PYC 
            {
              Map<String,double[][]> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cod",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // matriz ::= func AP matriz CP 
            {
              double[][] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        switch(f){
            case "inversa":
                boolean eq = Matrices.filas(m) == Matrices.columnas(m);
                if(eq)  RESULT = Matrices.inversa(m);
                else    {System.out.println(Matrices.ERROR_INVERSA); System.exit(-1);}
                break;
            case "transpuesta":
                RESULT = Matrices.transpuesta(m);
                break;
            case "adjunta":
                if(Matrices.filas(m) == Matrices.columnas(m))   RESULT = Matrices.adjunta(m);
                else                                            {System.out.println(Matrices.ERROR_ADJUNTA); System.exit(-1);}
                break;
            case "print":
                Matrices.print(m);
                break;
        }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // matriz ::= matriz MAS matriz 
            {
              double[][] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] e1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] e2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT =  Matrices.suma(e1,e2);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // matriz ::= matriz MENOS matriz 
            {
              double[][] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] e1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] e2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT =  Matrices.suma(e1,Matrices.producto(-1,e2));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // matriz ::= matriz POR matriz 
            {
              double[][] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] e1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] e2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(Matrices.filas(e1) == Matrices.columnas(e2)) RESULT =  Matrices.producto(e1,e2);
            else                                            {System.out.println(Matrices.ERROR_PROD);System.exit(-1);}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // matriz ::= matriz DIV matriz 
            {
              double[][] RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] e1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] e2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT =  Matrices.producto(e1,Matrices.inversa(e2));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // matriz ::= ALL jdef CLL 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> m = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            boolean eq = true;
            for(int i = 2; i < m.size() && eq ; i++) eq &= m.get(i).size() == m.get(i-1).size();
            if(eq)  RESULT = Matrices.toArray(m);
            else    {System.out.println(Matrices.ERROR_FILAS); System.exit(-1);}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // matriz ::= AC mdef CC 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> m = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            boolean eq = true;
            for(int i = 2; i < m.size() && eq ; i++) eq &= m.get(i).size() == m.get(i-1).size();
            if(eq)  RESULT = Matrices.toArray(m);
            else    {System.out.println(Matrices.ERROR_FILAS); System.exit(-1);}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // matriz ::= IDENT 
            {
              double[][] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(varmap.get(id) == null)  System.exit(-1);
        else                        RESULT = varmap.get(id);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // matriz ::= IDENT ASIG matriz 
            {
              double[][] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varmap.put(id,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // matriz ::= AP matriz CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> m = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mdef ::= mdef NT$0 PYC fila 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ArrayList<ArrayList<Double>>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<ArrayList<Double>> m = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT.add(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mdef",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mdef ::= fila 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ArrayList<Double>>(); RESULT.add(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mdef",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> m = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // jdef ::= jdef NT$1 COMA ALL fila CLL 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ArrayList<ArrayList<Double>>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<ArrayList<Double>> m = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT.add(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jdef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // jdef ::= ALL fila CLL 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList<ArrayList<Double>>(); RESULT.add(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jdef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              ArrayList<Double> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fila ::= fila NT$2 COMA NUMERO 
            {
              ArrayList<Double> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ArrayList<Double>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double st = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT.add(st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fila ::= NUMERO 
            {
              ArrayList<Double> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double st = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Double>(); RESULT.add(st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // func ::= INVERSA 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // func ::= ADJUNTA 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // func ::= TRANSPUESTA 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // func ::= PRINT 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
